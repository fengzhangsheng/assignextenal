

二 异常处理
		什么是异常？
		

处理异常的基本格式
try:
	 有可能出现异常的错误代码
except :
	  有异常时要执行的代码

处理异常的格式2
try:
	 有可能出现异常的错误代码
except   指定异常的类型:
	  有异常时要执行的代码

try:
        #gender="女"
        print(gender)
        print("hahaha ")

except NameError as x:

        print(x)

print("okokok")



处理异常的格式3  （捕获多种异常 ，捕获到就执行）
try:
	 有可能出现异常的错误代码

except   指定异常的类型 as  变量名:
	  有异常时要执行的代码
	  
except   指定异常的类型  as  变量名:
		有异常时要执行的代码

try:
        #gender="女"
        #print(gender)
        print("hahaha ")
        L=list("abc")
        print(L[3])

except NameError as x:
        print(x)

except IndexError as y:
        print(y)

print("okokok")


处理异常的格式4  （一起捕获多种异常 ，捕获到某一个就执行）
try:
	 有可能出现异常的错误代码

except   (错误名1,错误名2,.....)  as   变量名 :
	  有异常时要执行的代码
	  
try:
        #gender="女"
        print(gender)
        print("hahaha ")
        L=list("abc")
        print(L[3])

except (NameError,IndexError) as error:
        print("程序有错误请检查",error)


print("okokok")
	
	
使用内置的错误信息类  匹配所有的报错类型
try:
	 有可能出现异常的错误代码

except   Exception  as   变量名 :
	  有异常时要执行的代码

try:
        #foo()
        #print(gender)
        #print("hahaha ")
        L=list("abc")
        print(L[3])
except  Exception   as   error:
        print(error)

print("okokok")

处理异常的格式5  带else

try:
	 有可能出现异常的错误代码

except   Exception  as   变量名 :
	  有异常时要执行的代码
else:
	  没有异常输出时，执行的代码
	  
try:
        #foo()
        #print(gender)
        #print("hahaha ")
        L=list("abc")
        #print(L[3])
        print(L[1])
except Exception as error:
        print(error)
else:
        print("程序没有任何报错")

print("okokok")


处理异常的格式6  带finally     无条件执行finally下的代码


try:
	 有可能出现异常的错误代码

except   Exception  as   变量名 :
	  有异常时要执行的代码
else:
	  没有异常输出时，执行的代码
finally：
		必须执行的代码
	
try:
        #foo()
        #print(gender)
        #print("hahaha ")
        L=list("abc")
        #print(L[1])
        print(L[3])
except Exception as error:
        print(error)
else:
        print("程序没有任何报错")
finally:
        print("code over")

print("okokok")	



raise  程序员自己定义 错误类型 和 错误信息
		raise   错误类型(错误信息)
def set_age(name,age):
        if not 0 < age < 120:
                raise ValueError("age out of range.")
        print("%s is %s years old" % (name, age))

if __name__ == '__main__':
        try:
                set_age('bob', 25)
        except ValueError:
                print("重新执行脚本输入正确的数值")
        else:
                print("输入信息正确脚本执行完毕")


############################################
三、文件系统相关模块  之  OS模块 

>>> import  os
>>> os.getcwd()  # 返回当前的工作路径，pwd
'/root/桌面/py02/day03_code'

>>> os.mkdir('/tmp/nsd2012')   # mkdir /tmp/nsd2012

>>> os.makedirs('/tmp/nsd2012/a/b/c')  # mkdir -p /tmp/nsd2012/a/b/c

>>> os.listdir()  # ls
['mygames.py', '.idea', 'mynote.txt', 'python.log', 'mynote2.txt', '03_file_seek.py', '04_myprog.py', '05_cp.py', '01_read_text_file_by_string.py', '02_read_text_file_by_bytes.py']


>>> os.listdir('/tmp')  # ls /tmp  # 列出所有的文件夹
[ 'nsd2012', 'dir1', 'dir2']

>>> os.chdir('/tmp/nsd2012')  # cd  /tmp/nsd2012

>>> os.getcwd()   # pwd
'/tmp/nsd2012'

>>> os.symlink('/etc/passwd', '/tmp/abc')  # ln -s /etc/passwd /tmp/abc
>>> os.mknod('/tmp/myfile.txt')    # touch /tmp/myfile.txt

>>> os.chmod('/tmp/myfile.txt', 0o755)  # chmod 755 /tmp/myfile.txt

>>> os.rename('/tmp/myfile.txt', '/tmp/a.txt')  # mv /tmp/myfile.txt /tmp/a.txt
>>> os.rmdir('/tmp/dir2')   # rmdir /tmp/dir2
>>> os.remove('/tmp/a.txt')  # rm /tmp/a.txt


四  OS模块扩展 之  OS.path 模块

>>> import  os
>>> os.path.isabs('/root/abc.txt')   # 判断是否为绝对路径
True
>>> os.path.isdir('/tmp/nsd2012')    # 判断是否是文件夹
True
>>> os.mknod('/tmp/b.txt')   # touch /tmp/b.txt
>>> os.path.isfile('/tmp/b.txt')     # 判断是否是文件
True
>>> os.path.islink('/tmp/abc')      # 判断是否是软连接？
True
>>> os.path.ismount('/home')       # 存在并且是挂载点
True

>>> os.path.exists('/root')       # 判断文件或文件夹是否存在
True
>>> os.path.basename('/tmp/nsd2012/hello.py')  # 返回文件名
'hello.py'
>>> os.path.dirname('/tmp/nsd2012/hello.py')  # 返回路径
'/tmp/nsd2012'

>>> os.path.split('/tmp/nsd2012/hello.py')  # 拆分 路径和文件名
('/tmp/nsd2012', 'hello.py')

>>> os.path.join('/tmp/nsd2012', 'world.py')  # 拼接路径
'/tmp/nsd2012/world.py'

os.walk() 函数 遍历文件夹   （系统命令tree）

>>> for x in os.walk('/tmp/nsd2012'):
...    print(x)
... 
#  (路径 , 路径内的所有文件夹列表 , 路径内的所有文件列表)
('/tmp/nsd2012', ['a', 'aa'], [])
('/tmp/nsd2012/a', ['b'], ['aaa.txt'])
('/tmp/nsd2012/a/b', ['c'], ['bbb.txt'])
('/tmp/nsd2012/a/b/c', [], [])
('/tmp/nsd2012/aa', ['bb'], [])
('/tmp/nsd2012/aa/bb', ['cc'], [])
('/tmp/nsd2012/aa/bb/cc', [], [])

os 

三、文件系统相关模块  之  pickle 模块 
打开文件 的函数  与 open()  等效的  file() 函数     
dump(数据,文件名)  存储数据到文件里

load()    把文件里的数据读取出来

>>> import pickle as p
>>> f_name = "/code/f2.txt"
>>> 
>>> f = open(f_name,'wb')
>>> 
>>> L = [ "A" ,"M" , "C" ,"O" ]
>>> 
>>> p.dump(L,f)
>>> f.close()
>>> import subprocess
>>> subprocess.run('ls /code/f2.txt' , shell=True)
/code/f2.txt
CompletedProcess(args='ls /code/f2.txt', returncode=0)
>>>
>>> f_name
'/code/f2.txt'
>>> 
>>> f = open(f_name,'rb')
>>> data = p.load(f)
>>> print(data)
['A', 'M', 'C', 'O']
>>> 